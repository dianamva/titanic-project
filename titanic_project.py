# -*- coding: utf-8 -*-
"""titanic-project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Pj348TPx78EiCaJtrHOKztzLDBcuRP5
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as s
import statistics as ss
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler
from sklearn.feature_selection import mutual_info_classif
import matplotlib.pyplot as plt

#1
data = pd.read_csv('titanic.csv')

data.head(5)

data.info()

data.describe()

#2
data.isnull().sum()

data['Cabin'].mode()[0]

data['Cabin'].fillna(data['Cabin'].mode()[0], inplace=True)

data['Age'].fillna(data['Age'].mean(), inplace= True)

data.dropna(inplace = True)

data.info()

#3
data.drop(['Name', 'PassengerId'], axis = 1, inplace= True)

le  = LabelEncoder()

data['Sex_Encoded'] = le.fit_transform(data["Sex"])
data['Ticket_Encoded'] = le.fit_transform(data["Ticket"])
data['Cabin_Encoded'] = le.fit_transform(data["Cabin"])
data['Embarked_Encoded'] = le.fit_transform(data["Embarked"])

#4
sc = StandardScaler()

data['Age_scaled'] = sc.fit_transform(data[['Age']])
data['Fare_scaled'] = sc.fit_transform(data[['Fare']])

#5
data.drop('Sex',axis=1, inplace=True)
data.drop('Age',axis=1, inplace=True)
data.drop('Ticket',axis=1, inplace=True)
data.drop('Cabin',axis=1, inplace=True)
data.drop('Embarked',axis=1, inplace=True)
data.drop('Fare',axis=1, inplace=True)

data

plt.figure(figsize=(16,8))
sns.heatmap(data.corr(), annot=True)

X = data.drop('Survived', axis=1)
y = data['Survived']

imp = mutual_info_classif(X,y)
imp_ser = pd.Series(imp, X.columns)
imp_ser.plot(kind = 'bar', color = 'teal')
plt.show()

#6
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_model = LogisticRegression()

lr_model.fit(X_train, y_train)

y_pred = lr_model.predict(X_test)

#7
from sklearn.metrics import accuracy_score

round(accuracy_score(y_test, y_pred),2)

# 8
X_train = X_train.drop(['Parch','Embarked_Encoded','Age_scaled'], axis=1)
X_test = X_test.drop(['Parch','Embarked_Encoded','Age_scaled'], axis=1)

lr_model_v2 = LogisticRegression()

lr_model_v2.fit(X_train, y_train)

y_pred = lr_model_v2.predict(X_test)

round(accuracy_score(y_test, y_pred),2)

X_train = X_train.drop(['SibSp'], axis=1)
X_test = X_test.drop(['SibSp'], axis=1)
lr_model_v3 = LogisticRegression()
lr_model_v3.fit(X_train, y_train)
y_pred = lr_model_v3.predict(X_test)
round(accuracy_score(y_test, y_pred),2)

! git branch

